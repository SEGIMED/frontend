name: Deploy PR to VPS

on:
  pull_request:
    branches:
      - main
      - develop

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "18"

      - name: Install dependencies
        run: npm install

      - name: Build project
        run: npm run build

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker image
        run: docker build -t segimed/frontend:${{ github.sha }} .

      - name: Push Docker image to Docker Hub
        run: docker push segimed/frontend:${{ github.sha }}

      - name: Deploy to VPS
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            # Obtener los puertos actualmente en uso
            used_ports=$(docker ps --format "{{.Ports}}" | grep -oP '(?<=:)\d+(?=->3000)')
            available_port=""

            # Buscar un puerto disponible entre 3001 y 3003
            for port in {3001..3003}; do
              if ! echo "$used_ports" | grep -q "$port"; then
                available_port=$port
                break
              fi
            done

            # Si no hay puertos disponibles, eliminar el contenedor más antiguo
            if [ -z "$available_port" ]; then
              oldest_container=$(docker ps -q --filter "name=segimed-frontend-pr-*" --format "{{.ID}}" | tail -n 1)
              docker stop "$oldest_container"
              docker rm "$oldest_container"

              # Buscar nuevamente un puerto disponible después de liberar el más antiguo
              used_ports=$(docker ps --format "{{.Ports}}" | grep -oP '(?<=:)\d+(?=->3000)')
              for port in {3001..3003}; do
                if ! echo "$used_ports" | grep -q "$port"; then
                  available_port=$port
                  break
                fi
              done
            fi

            # Guardar el puerto en un archivo temporal
            echo "$available_port" > available_port.txt

            # Crear y mover al directorio del PR
            TARGET_DIR="/home/segimed-pr-${{ github.sha }}"
            mkdir -p $TARGET_DIR
            cd $TARGET_DIR

            # Tirar la última imagen de Docker Hub
            docker pull segimed/frontend:${{ github.sha }}

            # Crear docker-compose.yml
            echo "version: '3.9'
            services:
              app:
                image: segimed/frontend:${{ github.sha }}
                ports:
                  - \"$available_port:3000\"
                environment:
                  - NODE_ENV=production
                restart: always" > docker-compose.yml

            # Ejecutar docker-compose
            docker-compose up -d

            # Cleanup: Remove unused Docker images
            docker image prune -a -f --filter "until=24h"
      
      - name: Read available port
        id: read-port
        run: |
          available_port=$(cat available_port.txt)
          echo "::set-output name=port::$available_port"

      - name: Comment PR
        uses: thollander/actions-comment-pull-request@v2
        with:
          message: "http://${{ secrets.SSH_HOST }}:${{ steps.read-port.outputs.port}}/ ! :wave:"
